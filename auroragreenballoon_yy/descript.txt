//--Descript.txt
//Descript.txt is where you'll be doing all the coding for your balloon, essentially telling it where all the pieces you just made are supposed to go and where the text areas are and that kind of thing. You'll probably want to have a ghost open with the balloon in question and use "Balloon Test Mode" in the Developer Panel to test your balloon as you make changes so you can see what you're doing. This part can be a bit fiddly, but it's not super hard. You just have to be patient and find your coordinates.

//dont need pna's
use_self_alpha,1

//1. -- Basic information


charset,UTF-8

//This sets up the character set your balloon will use. This should be UTF-8 in almost all cases, unless you're using SHIFT-JIS or something instead.


type,balloon

//The type of your balloon is... a balloon of course, so leave this alone.


name,Aurora.EXE Green Balloon

//name is the name of your balloon as it will appear in the "Change Balloon" menu option, and how it'll be referenced in install.txt. Replace "Z - Simple" with whatever you want to call your balloon.


craftman,Vita/yuyudev
craftmanw,Vita/yuyudev
craftmanurl,https://thatoddhaystack.neocities.org/ukagaka/

//You may remember these three from the descript.txt file for a Ghost! They are essentially the same as before. Craftman is your name. Craftmanw is where you would put your name if it was written in non-alphanumeric characters, like Korean or Japanese or Russian or something. You can delete craftmanw if you want or aren't going to use it, but you should always have craftman.
//craftmanurl is where you put your homepage or blog url or whatever, wherever you want people to contact you.

homeurl,

//If you're setting up a network update for your ghost, you can also set one up for your balloon! I think, I haven't tested this. But basically, you'd want to set up a folder on your webspace for all your balloon files, then put the url for that folder here. You can read the network update page or balloon page for more details. I'm commenting it out just in case, but if you are going to use it, remove the two slashes in front.


//2. -- Defining Text Areas


origin.x,22
origin.y,10

//Origin defines exactly where text starts to appear in your balloon. Find the coordinates of the top left corner of where you want your text to start to appear. If you defined a "text area" rectangle in your balloon, find the top left coordinate for that and put it in here.


validrect.left,22
validrect.top,10
validrect.right,179
validrect.bottom,180


//validrect defines the space that will be used for text. It's much related to the origin point above. Basically, use the same "text area" rectangle from above to find the x  coordinate on the left and right side, and the y coordinate for the top and bottom and put them in here. As you might guess, .top and .bottom define the top and bottom of your text area and .right and .left the right and left. Of particular importance is .bottom, since that will define at what point your balloon will start scrolling text.


wordwrappoint.x,175
wordwrappoint.y,0


//wordwrappoint, as you can probably guess, is where the balloon will wrap any words or letters that go past that point. I have been struggling with an intelligent wordwrap that won't cut words in half for a long time with no progress before you ask, so you're just going to have to accept that it is a thing that will happen.
//Anyway, basically point your cursor to where you want words to wrap on your balloon and write down the x coordinate. The y coordinate is unimportant here.
//If you put 0 for x words will not wrap at all, I believe, although I'm not sure why you'd do that.


font.name,Microsoft Sans Serif
font.height,12
font.color.r,255
font.color.g,255
font.color.b,255


//This set of code here defines what the basic qualities of the font you want to use for your balloon. You can put in any font name you like, although be aware that if your user doesn't have that font, it'll default to MS Gothic.
//font.height is the size of your font, NO SMALLER THAN 10. I'M REALLY SERIOUS ABOUT THIS, THIS NEEDS TO BE READABLE, OKAY? DO NOT MAKE IT TOO SMALL.
//Along the same lines, font.color is the rgb values of the color you want for your font. PLEASE ALSO MAKE THIS READABLE. Light grey on light grey is no good. You can mess with these values as you like until you find a good color, or you can use Photoshop's color picker to find the values quickly once you know exactly what you're looking for.


//3. -- Balloon Position

windowposition.x,15
windowposition.y,70

//These two bits here basically determine where the balloon is positioned near your ghost when they start. You don't necessarily have to change these and they can be left at 0 if you like, and you can also set individual positions for your windows using the individual balloon.txt files.
//if you'd like your balloon to start centered directly over your ghost's head, you can put windowposition.x,center. If you have a balloon with a tail that points straight down, this will probably be handy.



//4. -- Other String


font.shadowcolor.r,-1
font.shadowcolor.g,-1
font.shadowcolor.b,-1

//These settings here are for a "dropshadow" for your font. These could potentially make it easier for someone to see your font if it's on a high-contrast background, but they can also be very distracting if done badly. If you want to have no drop shadow, leave it at -1, but if you do want one, fiddle with the RGB values as you did above for your normal font color.
//Again PLEASE consider readability first and foremost with your balloon. Don't use a dropshadow unless it really does make your text easier to read.


anchor.font.color.r,43
anchor.font.color.g,177
anchor.font.color.b,61

//These values define the color of anchor links in a ghost. Basically, the color of a hyperlink to somewhere. The easiest way to test this is to use Script Input in the developer panel to input an anchor word, which should automatically turn into a hyperlink. Again, try to make this readable.



//5. -- Choice Markers
//This set of code defines what it looks like when the balloon gives you a choice from a list of options. This can get a little confusing, so read this section carefully. A quick way to test how these look is to look at a ghost's menus.


cursor.blendmethod,none
cursor.style,underline

//cursor.style defines how the balloon displays a choice. You can put underline, square, or square+underline. As you can guess, this will either underline the option, put a square around it, or do both.
//If you set cursor.style to square, you'll need to set blendmethod as well. There are three values you can put after blendmethod. They are none, notmaskpen, and mergepennot. None keeps the square the same color, notmaskpen blends the color of the text and the background and then inverts it (supposedly), and mergepennot overlays the brush.color (below) over your text.
//In most cases, I would recommend leaving blendmethod as none and cursor.style as underline. You won't have to mess with these very much if that's the case. If you're feeling creative though, you can mess with blendmethod and see if you like how it looks.


cursor.pen.color.r,43
cursor.pen.color.g,177
cursor.pen.color.b,61

//cursor.pen.color is the color of the line underneath your text, or the square you have around it as defined by cursor.style above. This should probably be the same color as font color below, but it's up to you.


cursor.brush.color.r,43
cursor.brush.color.g,177
cursor.brush.color.b,61

//cursor.brush.color mostly applies if you set style to square up there. When you hover over a choice, this will layer a box over it. This is the color of that box. 
//Depending on whether you do mergepennot or whatever, the color may look a bit different. You'll have to mess with this a bit and see what looks good to you.


cursor.font.color.r,43
cursor.font.color.g,177
cursor.font.color.b,61

//cursor.font.color is the color of text for a choice. This may only come into play if you don't set a blendmethod as above. Either way, font.color and pen.color should probably be the same.



//6. -- Image Markers
//These tell the balloon where all your arrows and little doodads you made should go. Very important! This is a prime time to use the development panel and balloon test mode to adjust each element by pixel until it's just where it needs to be.


arrow0.x,182
arrow0.y,11

//These two coordinates define where your up arrow is. They should point at the top left corner of where you want your arrow to be on your balloon. If you marked out a small rectangle around your arrow, it will come in handy for this.


arrow1.x,182
arrow1.y,182

//Likewise, these two apply to your down arrow. Again, these two coordinates should point to the top left corner of where you want your down arrow to be on your balloon.


onlinemarker.x,8
onlinemarker.y,180

//Onlinemarker is where your online indicator will be. Again, you'll want the top left corner of where you want this to be on your balloon for your coordinates. Place them in here.


sstpmarker.x,23
sstpmarker.y,180

//sstpmarker is where your choice marker will be when the ghost is possibly doing some sstp related function. It's something very rare that doesn't seem to appear very often, but you can see it in balloon test mode... the white text that says "balloon test mode" is sstpmessage text (as below). Wherever you decide to put that text, you should put the sstpmarker alongside it. I've rarely ever seen sstpmessage text/sstpmarker show up in a balloon in casual use, so I wouldn't worry TOO much about it. Just set it someplace where it won't run too much into normal text and you should be fine.


sstpmessage.font.height,9
sstpmessage.font.color.r,150
sstpmessage.font.color.g,150
sstpmessage.font.color.b,150
sstpmessage.x,30
sstpmessage.y,180

//These set the values of the sstpmessage text. If you look at the balloon template in balloon test mode, you'll see that this text is near the bottom of the balloon, relatively out of the way. Again, I've rarely seen it appear, so as long as you tuck it in some small place like this, it should be fine.


number.font.name,Microsoft Sans Serif
number.font.height,10
number.font.color.r,150
number.font.color.g,150
number.font.color.b,150
number.xr,179
number.y,180

//Number is the information that'll come up when your ghost is downloading something, primarily an update, and it will tell you the name of the file and the size. You can set the font, size, and color here much like you have for the other aspects of your balloon. The default values are Font - MS Gothic and height - 10. At the bottom, you have the x/y coordinates. Again, find where you want these numbers to be on your balloon and put in the correct values here.
//HOWEVER, number is unusual that instead of using the top LEFT pixel as you have for all other aspects of your balloon, you will want the top RIGHT pixel instead. Instead of going from left to right, it will go right to left. Remember this.
//Also note that number.xr has an r in it, that's important.
//In Balloon Test Mode, this shows up as Test 128/256.


//7. -- Communication Box
//These define the parameters for your communicate boxes. All your boxes should be the same size with different captions, so you really only have to set this for one. To test how this looks, use the Script Input option in the Development Panel to bring up an input box real quick.


communicatebox.x,14
communicatebox.y,26

//This is the top left corner of where you want the text area of your box to be. If you've marked out an area in your input box using a rectangle of where the text goes, this is where you'll use it. Get the top left corner of that, and put it in here.


communicatebox.width,332
communicatebox.height,26

//These further refine your text area. The width is how wide your text area is in pixels. You can just crop your image down to the text area rectangle, get the width and height, and uncrop it to find this number easily.

//And this should be it for descript.txt! However, you are going to want to set some individual values for your larger balloons, since obviously things won't be in exactly the same place. So we're going to continue in balloons2.txt, balloons3.txt, balloonk2.txt and balloonk3.txt. 